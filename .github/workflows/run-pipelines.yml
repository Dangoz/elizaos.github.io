name: Run Pipelines

on:
  schedule:
    # Run at 23:00 UTC daily
    - cron: "0 23 * * *"
  workflow_dispatch: # Allow manual trigger
    inputs:
      force:
        description: "Force reingest of data + overwrite exports / summaries"
        type: boolean
        default: false
        required: false
      startDate:
        description: "Start date for data processing (format: YYYY-MM-DD)"
        type: string
        required: false
      endDate:
        description: "End date for data processing (format: YYYY-MM-DD)"
        type: string
        required: false

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
  PIPELINE_DATA_BRANCH: "_data" # Define branch name as environment variable

jobs:
  ingest-export:
    name: Ingest/Export Pipeline
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: write # Needed for pushing to branches

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      # Set common conditional variables
      - name: Set conditional variables
        id: set-vars
        run: |
          IS_FORCE="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.force == 'true' }}"
          HAS_START_DATE="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.startDate != '' }}"
          HAS_END_DATE="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.endDate != '' }}"
          START_DATE_ARG="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.startDate != '' && format(' -a {0}', github.event.inputs.startDate) || '' }}"
          END_DATE_ARG="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.endDate != '' && format(' -b {0}', github.event.inputs.endDate) || '' }}"
          FORCE_ARG="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.force == 'true' && ' --force' || '' }}"
          FORCE_OVERWRITE="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.force == 'true' && ' -o' || '' }}"

          echo "is_force=$IS_FORCE" >> $GITHUB_ENV
          echo "has_start_date=$HAS_START_DATE" >> $GITHUB_ENV
          echo "has_end_date=$HAS_END_DATE" >> $GITHUB_ENV
          echo "start_date_arg=$START_DATE_ARG" >> $GITHUB_ENV
          echo "end_date_arg=$END_DATE_ARG" >> $GITHUB_ENV
          echo "force_arg=$FORCE_ARG" >> $GITHUB_ENV
          echo "force_overwrite=$FORCE_OVERWRITE" >> $GITHUB_ENV

      # Get the latest artifact run ID
      - name: Get latest artifact run id
        run: |
          ARTIFACT_RUN_ID=$(curl -s "https://api.github.com/repos/${{ github.repository }}/actions/artifacts?per_page=1" | jq '.artifacts[0].workflow_run.id')
          echo "artifact_run_id=$ARTIFACT_RUN_ID" >> $GITHUB_ENV

      # Download SQLite database from previous run's artifacts
      - name: Download database artifact
        uses: actions/download-artifact@v4
        with:
          name: database
          path: ./data/
          run-id: ${{ env.artifact_run_id }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true # Allow first run to proceed without artifact

      # Set up pipeline-data branch worktree
      - name: Setup pipeline-data branch
        uses: ./.github/actions/pipeline-data
        with:
          operation: setup
          branch_name: ${{ env.PIPELINE_DATA_BRANCH }}

      - name: Initialize database
        run: bun run db:migrate

      - name: Run ingest pipeline
        run: bun run pipeline ingest${{ env.force_arg }}${{ env.start_date_arg }}${{ env.end_date_arg }}

      - name: Run process pipeline
        run: bun run pipeline process

      - name: Run export pipeline # Export everything missing + overwrite last 2 days to ensure overlap
        run: |
          bun run pipeline export${{ env.start_date_arg }}${{ env.end_date_arg }}${{ env.force_overwrite }}
          bun run pipeline export --days 2 -o
      - name: Install uv
        uses: astral-sh/setup-uv@v5

      - name: Dump SQLite database to diffable files
        run: uv run uvx sqlite-diffable dump data/db.sqlite data/dump/ --all

      # Upload SQLite database as artifact
      - name: Upload database artifact
        uses: actions/upload-artifact@v4
        with:
          name: database
          path: data/db.sqlite
          retention-days: 90 # Maximum retention for public repos

      # Update pipeline-data branch with new data
      - name: Update pipeline-data branch
        uses: ./.github/actions/pipeline-data
        with:
          operation: update
          commit_message: "Ingest/export run: $(date -u +'%Y-%m-%d %H:%M')"
          branch_name: ${{ env.PIPELINE_DATA_BRANCH }}

      # Cleanup worktree (always runs)
      - name: Cleanup
        if: always()
        uses: ./.github/actions/pipeline-data
        with:
          operation: cleanup
          branch_name: ${{ env.PIPELINE_DATA_BRANCH }}

  generate-summaries:
    name: Generate Summaries
    needs: ingest-export
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: write # Needed for pushing to branches

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install --frozen-lockfile

      # Set common conditional variables
      - name: Set conditional variables
        id: set-vars
        run: |
          IS_FORCE="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.force == 'true' }}"
          HAS_START_DATE="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.startDate != '' }}"
          HAS_END_DATE="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.endDate != '' }}"
          START_DATE_ARG="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.startDate != '' && format(' -a {0}', github.event.inputs.startDate) || '' }}"
          END_DATE_ARG="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.endDate != '' && format(' -b {0}', github.event.inputs.endDate) || '' }}"
          FORCE_OVERWRITE="${{ github.event_name == 'workflow_dispatch' && github.event.inputs.force == 'true' && ' -o' || '' }}"

          echo "is_force=$IS_FORCE" >> $GITHUB_ENV
          echo "has_start_date=$HAS_START_DATE" >> $GITHUB_ENV
          echo "has_end_date=$HAS_END_DATE" >> $GITHUB_ENV
          echo "start_date_arg=$START_DATE_ARG" >> $GITHUB_ENV
          echo "end_date_arg=$END_DATE_ARG" >> $GITHUB_ENV
          echo "force_overwrite=$FORCE_OVERWRITE" >> $GITHUB_ENV

      # Download the SQLite database artifact from the previous job
      - name: Download database artifact
        uses: actions/download-artifact@v4
        with:
          name: database
          path: ./data/

      # Set up pipeline-data branch worktree
      - name: Setup pipeline-data branch
        uses: ./.github/actions/pipeline-data
        with:
          operation: setup
          branch_name: ${{ env.PIPELINE_DATA_BRANCH }}

      # Determine which summaries to run based on day of week
      - name: Check day of week for contributor summaries
        id: schedule-check
        run: |
          DAY_OF_WEEK=$(date +%u)

          # Always run project summaries
          echo "run_project=true" >> $GITHUB_OUTPUT

          # Run contributor summaries on Sunday (day 7) or if manually triggered
          if [ "$DAY_OF_WEEK" = "7" ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "run_contributor=true" >> $GITHUB_OUTPUT
          else
            echo "run_contributor=false" >> $GITHUB_OUTPUT
          fi

      # Run project summaries (daily)
      - name: Generate project summaries
        if: ${{ steps.schedule-check.outputs.run_project == 'true' }}
        run: |
          # Full project summary
          bun run pipeline summarize -t project${{ env.start_date_arg }}${{ env.end_date_arg }}${{ env.force_overwrite }}
          # Recent project summary with overwrite
          bun run pipeline summarize -t project -o -d 1

      # Run contributor summaries (weekly on Sunday)
      - name: Generate contributor summaries
        if: ${{ steps.schedule-check.outputs.run_contributor == 'true' }}
        run: |
          # Full contributor summary
          bun run pipeline summarize -t contributors${{ env.start_date_arg }}${{ env.end_date_arg }}${{ env.force_overwrite }}
          # Recent contributor summary with overwrite
          bun run pipeline summarize -t contributors -o -d 1

      # Update pipeline-data branch with new summaries
      - name: Update pipeline-data branch with summaries
        uses: ./.github/actions/pipeline-data
        with:
          operation: update
          commit_message: "Summary generation (${{ steps.schedule-check.outputs.run_contributor == 'true' && 'contributor and project' || 'project' }}): $(date -u +'%Y-%m-%d %H:%M')"
          branch_name: ${{ env.PIPELINE_DATA_BRANCH }}

      # Cleanup worktree (always runs)
      - name: Cleanup
        if: always()
        uses: ./.github/actions/pipeline-data
        with:
          operation: cleanup
          branch_name: ${{ env.PIPELINE_DATA_BRANCH }}