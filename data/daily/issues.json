[
  {
    "id": "I_kwDOMT5cIs6nvvd1",
    "number": 2867,
    "title": "TypeError: basex is not a function",
    "body": "Setup:\nnode 23.3.0\npnpm 9.15.2\nWindows 10 Pro\n\nI can install and build ok, but when I start the app: \n\n> pnpm start --character=\"characters/mycharacter.character.json”\n\nI keep getting this error:\n\nTypeError: **basex is not a function**\n    at Object.<anonymous> (C:\\Users\\raftus\\Documents\\Websites\\eliza\\packages\\plugin-nft-generation\\node_modules\\@solana\\web3.js\\node_modules\\bs58\\bs58\\index.js:4:18)\n    at Module._compile (node:internal/modules/cjs/loader:1546:14)\n    at Object..js (node:internal/modules/cjs/loader:1698:10)\n    at Module.load (node:internal/modules/cjs/loader:1303:32)\n    at Function._load (node:internal/modules/cjs/loader:1117:12)\n    at TracingChannel.traceSync (node:diagnostics_channel:322:14)\n    at wrapModuleLoad (node:internal/modules/cjs/loader:218:24)\n    at Module.require (node:internal/modules/cjs/loader:1325:12)\n    at require (node:internal/modules/helpers:136:16)\n    at Object.<anonymous> (C:\\Users\\raftus\\Documents\\Websites\\eliza\\packages\\plugin-nft-generation\\node_modules\\@solana\\web3.js\\lib\\index.cjs.js:s.js:6:12)\n\nThe only .env variables I've set are OPENAI_API_KEY and USE_OPENAI_EMBEDDING\n\n![Image](https://github.com/user-attachments/assets/62740db1-32f4-4e7d-92d6-863cab78139f)\n\nAll the references to bs58 seem to be consistent (\"6.0.0\"). Anyone else come across this problem?",
    "state": "OPEN",
    "createdAt": "2025-01-27T23:54:43Z",
    "updatedAt": "2025-01-27T23:54:43Z",
    "author": {
      "login": "RalphLavelle",
      "avatarUrl": "https://avatars.githubusercontent.com/u/1059059?v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qWA",
        "name": "bug",
        "color": "d73a4a",
        "description": "Something isn't working"
      }
    ],
    "comments": []
  },
  {
    "id": "I_kwDOMT5cIs6nvWGP",
    "number": 2864,
    "title": "Btcfun crash",
    "body": "**Describe the bug**\n\nBtcfun auto start plugin is crashing with code 7.\nAparently Two node versions conflict on btcfun plugin\n\n**To Reproduce**\n\n1. last version repo \n2. start default character\n3. llocal_llama model\n\n**Screenshots**\n\n{preloadDylibs();dylibsLoaded=true;if(runDependencies>0){return}}if(ENVIRONMENT_IS_PTHREAD){initRuntime();startWorker(Module);return}preRun();if(runDependencies>0){return}function doRun(){if(calledRun)return;calledRun=true;Module[\"calledRun\"]=true;if(ABORT)return;initRuntime();preMain();if(Module[\"onRuntimeInitialized\"])Module[\"onRuntimeInitialized\"]();if(shouldRunNow)callMain(args);postRun()}if(Module[\"setStatus\"]){Module[\"setStatus\"](\"Running...\");setTimeout(function(){setTimeout(function(){Module[\"setStatus\"](\"\")},1);doRun()},1)}else{doRun()}checkStackCookie()}function checkUnflushedContent(){var oldOut=out;var oldErr=err;var has=false;out=err=x=>{has=true};try{_fflush(0);[\"stdout\",\"stderr\"].forEach(function(name){var info=FS.analyzePath(\"/dev/\"+name);if(!info)return;var stream=info.object;var rdev=stream.rdev;var tty=TTY.ttys[rdev];if(tty&&tty.output&&tty.output.length){has=true}})}catch(e){}out=oldOut;err=oldErr;if(has){warnOnce(\"stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.\")}}if(Module[\"preInit\"]){if(typeof Module[\"preInit\"]==\"function\")Module[\"preInit\"]=[Module[\"preInit\"]];while(Module[\"preInit\"].length>0){Module[\"preInit\"].pop()()}}var shouldRunNow=true;if(Module[\"noInitialRun\"])shouldRunNow=false;run();\nn\nError: Dynamic require of \"buffer\" is not supported\n    at file:///Users/Documents/eliza/packages/plugin-btcfun/dist/index.js:12:11\n    at ../../node_modules/bitcoinjs-lib/src/types.js (file:///Users/Documents/eliza/packages/plugin-btcfun/dist/index.js:954:24)\n    at __require2 (file:///Users/Documents/eliza/packages/plugin-btcfun/dist/index.js:15:52)\n    at ../../node_modules/bitcoinjs-lib/src/script_signature.js (file:///Users//Documents/eliza/packages/plugin-btcfun/dist/index.js:1041:21)\n    at __require2 (file:///Users/Documents/eliza/packages/plugin-btcfun/dist/index.js:15:52)\n    at ../../node_modules/bitcoinjs-lib/src/script.js (file:///Users/Documents/eliza/packages/plugin-btcfun/dist/index.js:1108:31)\n    at __require2 (file:///Users/Documents/eliza/packages/plugin-btcfun/dist/index.js:15:52)\n    at ../../node_modules/bitcoinjs-lib/src/payments/embed.js (file:///Users/Documents/eliza/packages/plugin-btcfun/dist/index.js:1321:23)\n    at __require2 (file:///Users/Documents/eliza/packages/plugin-btcfun/dist/index.js:15:52)\n    at ../../node_modules/bitcoinjs-lib/src/payments/index.js (file:///Users/Documents/eliza/packages/plugin-btcfun/dist/index.js:4669:23)\n    at __require2 (file:///Users/Documents/eliza/packages/plugin-btcfun/dist/index.js:15:52)\n    at ../../node_modules/bitcoinjs-lib/src/address.js (file:///Users/Documents/eliza/packages/plugin-btcfun/dist/index.js:4734:24)\n    at __require2 (file:///Users/Documents/eliza/packages/plugin-btcfun/dist/index.js:15:52)\n    at ../../node_modules/bitcoinjs-lib/src/index.js (file:///Users/Documents/eliza/packages/plugin-btcfun/dist/index.js:8966:23)\n    at __require2 (file:///Users/Documents/eliza/packages/plugin-btcfun/dist/index.js:15:52)\n    at file:///Users/Documents/eliza/packages/plugin-btcfun/dist/index.js:14297:36\n    at ModuleJob.run (node:internal/modules/esm/module_job:271:25)\n    at async onImport.tracePromise.__proto__ (node:internal/modules/esm/loader:547:26)\n    at async asyncRunEntryPointWithESMLoader (node:internal/modules/run_main:116:5)\n\nNode.js v23.3.0\n/Users/Documents/eliza/agent:\n ERR_PNPM_RECURSIVE_RUN_FIRST_FAIL  @elizaos/agent@0.1.9-alpha.1 start: `node --loader ts-node/esm src/index.ts \"--isRoot\"`\nExit status 7\n**Additional context**\n\n<!-- Add any other context about the problem here. -->\n",
    "state": "OPEN",
    "createdAt": "2025-01-27T22:40:00Z",
    "updatedAt": "2025-01-27T22:40:26Z",
    "author": {
      "login": "photografereth",
      "avatarUrl": "https://avatars.githubusercontent.com/u/108369375?u=1f75b8587e3d6ac304cca64bec6d2cd1c345459d&v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qWA",
        "name": "bug",
        "color": "d73a4a",
        "description": "Something isn't working"
      }
    ],
    "comments": [
      {
        "id": "IC_kwDOMT5cIs6b_P4D",
        "author": "github-actions",
        "body": "Hello @photografereth! Welcome to the elizaOS community. Thank you for opening your first issue; we appreciate your contribution. You are now an elizaOS contributor!"
      }
    ]
  },
  {
    "id": "I_kwDOMT5cIs6nt04Q",
    "number": 2859,
    "title": "plugin-asterai: test config and test coverage",
    "body": "**Is your feature request related to a problem? Please describe.**\n\n<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->\nThe plugin-asterai package lacks comprehensive test coverage, which makes it difficult to ensure reliability and catch potential issues. \n**Describe the solution you'd like**\n\n<!-- A clear and concise description of what you want to happen. -->\n-Test coverage for all key functionalities:\nEnvironment configuration validation\nQuery handling and responses\nError handling scenarios\nProvider summary fetching and caching\nMemory management through the knowledge manager\n-Test organization improvements:\nClear test structure with describe/it blocks\nProper beforeEach setup for each test\nConsistent mock implementations across test files\n\n**Describe alternatives you've considered**\n\n<!-- A clear and concise description of any alternative solutions or features you've considered. -->\n\n**Additional context**\n\n<!-- Add any other context or screenshots about the feature request here. -->\n",
    "state": "OPEN",
    "createdAt": "2025-01-27T18:53:15Z",
    "updatedAt": "2025-01-27T18:53:15Z",
    "author": {
      "login": "ai16z-demirix",
      "avatarUrl": "https://avatars.githubusercontent.com/u/188117230?u=424cd5b834584b3799da288712b3c4158c8032a1&v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qYA",
        "name": "enhancement",
        "color": "a2eeef",
        "description": "New feature or request"
      }
    ],
    "comments": []
  },
  {
    "id": "I_kwDOMT5cIs6ntshK",
    "number": 2858,
    "title": "[V2] Move all models to runtime.call() and implement runtime.call() from v2-research",
    "body": "Currently models are hardcoded into core as embedding, image model, text generation model, etc.\n\nWe have a new pattern in `v2-research` where the runtime calls an async function using `async runtime.call(functionName, functionParams)` -- we want to migrate this pattern to core and remove all hardcoded models, embedding providers, etc. Instead, handlers will be registered through plugins by function name. The first registered function will be called.\n\nStuff like this will go away completely:\n```\nexport const EmbeddingProvider = {\n    OpenAI: \"OpenAI\",\n    Ollama: \"Ollama\",\n    GaiaNet: \"GaiaNet\",\n    Heurist: \"Heurist\",\n    BGE: \"BGE\",\n} as const;\n```\n\nWe should make sure to call trimTokens inside each model provider to make sure the token length is right, so we don't need to pass model info back into the runtime.\n\nWe should add events for the generation as well, so we can hook in proofs or attestations or hashes or whatever a user might want to add.\n\nWe should add runtime tests for calls and events.\n\nFor local modelProvider, we should make ollama a plugin that operates separately and move the code that is currently in the llama service.\n\nchunkSize has been set by model settings, if hardcoding chunk size is bad then we may want to get a call('getModelContextLength') function\n\nWe've been calling image generation through plugin-node/src/services/image.ts -- this is a bad pattern anyways, but also we can migrate this code to runtime.call()",
    "state": "OPEN",
    "createdAt": "2025-01-27T18:35:59Z",
    "updatedAt": "2025-01-27T23:17:13Z",
    "author": {
      "login": "lalalune",
      "avatarUrl": "https://avatars.githubusercontent.com/u/18633264?u=e2e906c3712c2506ebfa98df01c2cfdc50050b30&v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAAB1dE8Sw",
        "name": "V2",
        "color": "1670F6",
        "description": "Eliza 0.2.0"
      }
    ],
    "comments": []
  },
  {
    "id": "I_kwDOMT5cIs6ntrLA",
    "number": 2857,
    "title": "[V2] Consolidate RagKnowledge and Knowledge",
    "body": "In the current core we have duplicate uses of RAG. knowledge.ts should serve all of our knowledge retrieval needs, and ragKnowledge.ts should get rolled up into this",
    "state": "OPEN",
    "createdAt": "2025-01-27T18:33:10Z",
    "updatedAt": "2025-01-27T18:33:10Z",
    "author": {
      "login": "lalalune",
      "avatarUrl": "https://avatars.githubusercontent.com/u/18633264?u=e2e906c3712c2506ebfa98df01c2cfdc50050b30&v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAAB1dE8Sw",
        "name": "V2",
        "color": "1670F6",
        "description": "Eliza 0.2.0"
      }
    ],
    "comments": []
  },
  {
    "id": "I_kwDOMT5cIs6ns5rO",
    "number": 2856,
    "title": "A feature to collect information from Telegram group or Discord channel",
    "body": "I would like to collect information about communities in Telegram groups and Discord channels. Based on my review so far, it seems possible to infiltrate communities using bots or connect sessions with user accounts in the case of Telegram, but these methods are quite limited. It would be great if the Eliza-provided Agent could include an additional feature to collect community information and export it.",
    "state": "OPEN",
    "createdAt": "2025-01-27T17:03:54Z",
    "updatedAt": "2025-01-27T17:04:27Z",
    "author": {
      "login": "Resister-boy",
      "avatarUrl": "https://avatars.githubusercontent.com/u/104838360?v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qYA",
        "name": "enhancement",
        "color": "a2eeef",
        "description": "New feature or request"
      }
    ],
    "comments": [
      {
        "id": "IC_kwDOMT5cIs6b8tU6",
        "author": "github-actions",
        "body": "Hello @Resister-boy! Welcome to the elizaOS community. Thank you for opening your first issue; we appreciate your contribution. You are now an elizaOS contributor!"
      }
    ]
  },
  {
    "id": "I_kwDOMT5cIs6nsYXU",
    "number": 2853,
    "title": "plugin anyone: test config and coverate",
    "body": "**Is your feature request related to a problem? Please describe.**\nThe plugin-anyone package lacks proper test coverage for its core functionality, specifically the startAnyone and stopAnyone actions. Without comprehensive tests, we couldn't ensure the reliability of the Anyone client and proxy service initialization/cleanup processes, making it difficult to catch potential issues before they affect production.\n**Describe the solution you'd like**\n\n<!-- A clear and concise description of what you want to happen. -->\n- Add Vitest as testing framework\n* Create __tests__ directory in package root\n* Add tests for startAnyone and stopAnyone actions\n* No use of undefined, unknown or other unsafe type casts\n* Add basic vitest config\n* Add test scripts to package.json:\n    * test: Run tests once\n    * test:watch: Run tests in watch mode\nThe tests should cover:\n* Action validation\n* Handler functionality\n* Service initialization/cleanup\n* Error handling\n* Action metadata validation\n**Describe alternatives you've considered**\n\n<!-- A clear and concise description of any alternative solutions or features you've considered. -->\n\n**Additional context**\n\n<!-- Add any other context or screenshots about the feature request here. -->\n",
    "state": "CLOSED",
    "createdAt": "2025-01-27T16:08:56Z",
    "updatedAt": "2025-01-27T16:59:10Z",
    "author": {
      "login": "ai16z-demirix",
      "avatarUrl": "https://avatars.githubusercontent.com/u/188117230?u=424cd5b834584b3799da288712b3c4158c8032a1&v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qYA",
        "name": "enhancement",
        "color": "a2eeef",
        "description": "New feature or request"
      }
    ],
    "comments": []
  },
  {
    "id": "I_kwDOMT5cIs6nr-FZ",
    "number": 2851,
    "title": "Publish plugin-sui",
    "body": "**Is your feature request related to a problem? Please describe.**\n\nWe can't install plugin-sui because `@elizaos/plugin-sui is not in the npm registry, or you have no permission to fetch it.`\n\n**Describe the solution you'd like**\n\nPublish `plugin-sui` as npm registry \n",
    "state": "OPEN",
    "createdAt": "2025-01-27T15:24:50Z",
    "updatedAt": "2025-01-27T15:41:49Z",
    "author": {
      "login": "hoangquocvietuet",
      "avatarUrl": "https://avatars.githubusercontent.com/u/108970301?u=53396fc47cb2060adc755700e0067bcb23d40fac&v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qYA",
        "name": "enhancement",
        "color": "a2eeef",
        "description": "New feature or request"
      }
    ],
    "comments": [
      {
        "id": "IC_kwDOMT5cIs6b7e8V",
        "author": "github-actions",
        "body": "Hello @hoangquocvietuet! Welcome to the elizaOS community. Thank you for opening your first issue; we appreciate your contribution. You are now an elizaOS contributor!"
      },
      {
        "id": "IC_kwDOMT5cIs6b7poG",
        "author": "hoangquocvietuet",
        "body": "May i ask why some packages are published, some aren't?\n\ncc: @shakkernerd "
      }
    ]
  },
  {
    "id": "I_kwDOMT5cIs6nrj81",
    "number": 2849,
    "title": "plugin-3d-generation: test config and test coverage",
    "body": "**Is your feature request related to a problem? Please describe.**\n\n<!-- A clear and concise description of what the problem is. Ex. I'm always frustrated when [...] -->\nThe 3D generation plugin will need enhanced test coverage in several areas that will be important for future development:\n1. The test suite will need to cover queue update callback functionality from the FAL API\n2. There will be a need to test different types of 3D model responses (various file formats and sizes)\n3. The error handling tests will need to be more specific about different types of API errors that could occur\n**Describe the solution you'd like**\n\n<!-- A clear and concise description of what you want to happen. -->\n1. New test cases for queue updates will:\n    * Test how progress updates will be handled during generation\n    * Verify how queue position updates will be managed\n    * Ensure cancellation scenarios will be properly handled\n2. Additional test cases for different model formats will:\n    * Verify how .glb files will be processed\n    * Ensure .obj files will be handled correctly\n    * Test how different file sizes will be managed\n3. Enhanced error handling tests will:\n    * Cover specific API error codes that might occur\n    * Verify how network timeouts will be handled\n    * Test how rate limiting will be managed\n    * Ensure invalid API key formats will be properly detected\nThese improvements will make our test suite more comprehensive and will help catch edge cases before they become issues in production.\n\n**Describe alternatives you've considered**\n\n<!-- A clear and concise description of any alternative solutions or features you've considered. -->\n\n**Additional context**\n\n<!-- Add any other context or screenshots about the feature request here. -->\n",
    "state": "CLOSED",
    "createdAt": "2025-01-27T14:42:07Z",
    "updatedAt": "2025-01-27T16:59:19Z",
    "author": {
      "login": "ai16z-demirix",
      "avatarUrl": "https://avatars.githubusercontent.com/u/188117230?u=424cd5b834584b3799da288712b3c4158c8032a1&v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qYA",
        "name": "enhancement",
        "color": "a2eeef",
        "description": "New feature or request"
      }
    ],
    "comments": []
  },
  {
    "id": "I_kwDOMT5cIs6nnfQx",
    "number": 2825,
    "title": "chore: Add missing README.md files for packages folder",
    "body": "**Is your feature request related to a problem? Please describe.**\n\nMissing README.md files:\n\n- [ ] adapter-mongodb\n- [ ] adapter-pglite\n- [ ] adapter-postgres\n- [ ] adapter-qdrant\n- [ ] adapter-redis\n- [ ] adapter-sqlite\n- [ ] adapter-sqljs\n- [ ] adapter-supabase\n- [ ] client-alexa\n- [ ] client-auto\n- [ ] client-direct\n- [x] client-discord\n- [ ] client-eliza-home\n- [ ] client-farcaster\n- [ ] client-lens\n- [ ] client-simsai\n- [ ] client-twitter\n- [ ] core\n- [ ] _examples\n- [x] plugin-allora\n- [x] plugin-ankr\n- [x] plugin-anyone\n- [x] plugin-autonome\n- [x] plugin-dexscreener\n- [x] plugin-genlayer\n- [x] plugin-goplus\n- [x] plugin-nvidia-nim\n- [x] plugin-omniflix\n- [x] plugin-solana-agent-kit\n- [ ] plugin-solana-agentkit\n- [ ] plugin-story\n\n**Describe the solution you'd like**\n\nAdd a README for each\n\n**Describe alternatives you've considered**\n\n\n**Additional context**\n\n",
    "state": "OPEN",
    "createdAt": "2025-01-27T05:58:00Z",
    "updatedAt": "2025-01-27T06:27:45Z",
    "author": {
      "login": "madjin",
      "avatarUrl": "https://avatars.githubusercontent.com/u/32600939?u=cdcf89f44c7a50906c7a80d889efa85023af2049&v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qWw",
        "name": "documentation",
        "color": "0075ca",
        "description": "Improvements or additions to documentation"
      },
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qYA",
        "name": "enhancement",
        "color": "a2eeef",
        "description": "New feature or request"
      }
    ],
    "comments": []
  },
  {
    "id": "I_kwDOMT5cIs6nm0R2",
    "number": 2815,
    "title": "node-llama-cpp",
    "body": "I continue getting this when following the install instructions and running `pnpm install --no-frozen-lockfile`\n\n```\nnode_modules/canvas: Running install script...\nnode_modules/node-llama-cpp: Running postinstall script, failed in 2.4s\nnode_modules/node-llama-cpp postinstall$ node ./dist/cli/cli.js postinstall\n└─ Failed in 2.4s at /eliza/node_modules/node-llama-cpp\n```\n\nRunning on `Apple M1 Max 64 GB Sonoma`\n\nI get the same issue on the main and latest branch \n\nThere have been multiple issues created about this and suggested workarounds that I've tried but the error is still persisting. Is there a more official/consistent solution? Can the post install script be skipped outright? \n",
    "state": "OPEN",
    "createdAt": "2025-01-27T02:39:54Z",
    "updatedAt": "2025-01-27T02:40:20Z",
    "author": {
      "login": "emmajane1313",
      "avatarUrl": "https://avatars.githubusercontent.com/u/72898465?u=a9243eb7c3b305d3c805622b7a9bce59e15d096c&v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qWA",
        "name": "bug",
        "color": "d73a4a",
        "description": "Something isn't working"
      }
    ],
    "comments": [
      {
        "id": "IC_kwDOMT5cIs6b2e2c",
        "author": "github-actions",
        "body": "Hello @emmajane1313! Welcome to the elizaOS community. Thank you for opening your first issue; we appreciate your contribution. You are now an elizaOS contributor!"
      }
    ]
  }
]
