[
  {
    "id": "I_kwDOMT5cIs6ueCLj",
    "number": 3981,
    "title": "Check if this is a plugin (package.json contains 'eliza' section with type='plugin')?",
    "body": "can you please show me examples of where to find plugins as defined here?\nhttps://github.com/elizaOS/eliza/blob/9834bbd06128356b44b091f022fc2a2d024a875e/packages/cli/src/commands/start.ts#L346\n\n```\n// Check if this is a plugin (package.json contains 'eliza' section with type='plugin')\n      if (packageJson.eliza?.type && packageJson.eliza.type === 'plugin') {\n        isPlugin = true;\n        logger.info('Found Eliza plugin in current directory');\n      }\n\n      // Check if this is a project (package.json contains 'eliza' section with type='project')\n      if (packageJson.eliza?.type && packageJson.eliza.type === 'project') {\n        isProject = true;\n        logger.info('Found Eliza project in current directory');\n      }\n```",
    "state": "OPEN",
    "createdAt": "2025-03-18T04:45:01Z",
    "updatedAt": "2025-03-18T18:08:36Z",
    "author": {
      "login": "jmikedupont2",
      "avatarUrl": "https://avatars.githubusercontent.com/u/16427113?u=2bdad12714de646188f98a07736a54f765ad5e3b&v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qYA",
        "name": "enhancement",
        "color": "a2eeef",
        "description": "New feature or request"
      }
    ],
    "comments": []
  },
  {
    "id": "I_kwDOMT5cIs6uclKL",
    "number": 3978,
    "title": "How to debug remotely v2",
    "body": "Here is how I debugged on v2\n\nbash\n`bun --verbose --inspect-brk=192.168.1.90:9229 ../cli/dist/index.js start`\n\njson\n```\n{\n  \"url\": \"ws://192.168.1.90:9229/hiva4rzuydf\",\n  \"name\": \"Attach bun\",\n  \"type\": \"bun\",\n  \"request\": \"attach\"\n}\n```\n",
    "state": "OPEN",
    "createdAt": "2025-03-18T00:42:15Z",
    "updatedAt": "2025-03-18T18:06:29Z",
    "author": {
      "login": "jmikedupont2",
      "avatarUrl": "https://avatars.githubusercontent.com/u/16427113?u=2bdad12714de646188f98a07736a54f765ad5e3b&v=4"
    },
    "labels": [
      {
        "id": "LA_kwDOMT5cIs8AAAABrA0qYA",
        "name": "enhancement",
        "color": "a2eeef",
        "description": "New feature or request"
      },
      {
        "id": "LA_kwDOMT5cIs8AAAAB1dE8Sw",
        "name": "V2",
        "color": "1670F6",
        "description": "Eliza 0.2.0"
      }
    ],
    "comments": [
      {
        "id": "IC_kwDOMT5cIs6izFI-",
        "author": "jmikedupont2",
        "body": "grok explain:\n\n\nThe Command:\nbash\n`bun --verbose --inspect-brk=192.168.1.90:9229 ../cli/dist/index.js start`\nbun: This invokes Bun, a fast JavaScript runtime designed as an alternative to Node.js, with built-in support for TypeScript, JSX, and more.\n\n`--verbose`: This flag tells Bun to output detailed logs, which is useful for debugging or understanding what’s happening under the hood (e.g., module loading, execution steps).\n\n`--inspect-brk=192.168.1.90:9229:`\n--inspect-brk: This is a debugging flag that enables Bun’s inspector and pauses execution at the start of your script (similar to \nNode.js’s --inspect-brk). It allows a debugger to connect before any code runs, giving you a chance to set breakpoints or step through code.\n192.168.1.90:9229: This specifies the IP address (192.168.1.90) and port (9229) where the debugging server will listen. \n192.168.1.90 is likely the local IP of your machine on your network.\n9229 is a common default port for debugging protocols (borrowed from Node.js’s V8 Inspector).\n`../cli/dist/index.js`: This is the script you’re running. It’s a JavaScript file located in a cli/dist directory one level up from your current working directory (packages/the-org).\nstart: This is an argument passed to your index.js script. Your script likely interprets it as a command (e.g., to start a server, process, or application).\nWhat this does: Bun starts executing index.js, pauses immediately (due to --inspect-brk), and opens a debugging server at 192.168.1.90:9229 that a debugger can connect to.\nThe JSON:\njson\n```\n{\n  \"url\": \"ws://192.168.1.90:9229/hiva4rzuydf\",\n  \"name\": \"Attach bun\",\n  \"type\": \"bun\",\n  \"request\": \"attach\"\n}\n```\n\nThis looks like a configuration snippet, likely for a debugger client (e.g., VS Code’s launch.json or a similar tool), telling it how to connect to Bun’s debugging server.\n`\"url\": \"ws://192.168.1.90:9229/hiva4rzuydf\"`:\nThis is a WebSocket URL, which is how the debugging protocol communicates.\nws:// indicates a WebSocket connection.\n192.168.1.90:9229 matches the IP and port from your Bun command.\n/hiva4rzuydf is a unique session ID or endpoint generated by Bun’s debugging server. It identifies this specific instance of the debugger.\n\"name\": \"Attach bun\": A human-readable label for this configuration (e.g., in a debugger UI like VS Code).\n\"type\": \"bun\": Specifies that the debugger should use Bun’s debugging protocol. Some tools (like VS Code) need to know the runtime type to use the right adapter.\n\"request\": \"attach\": Indicates this is an \"attach\" request, meaning the debugger will connect to an already-running process (as opposed to \"launch,\" where the debugger starts the process).\nWhat this does: This config tells your debugger (e.g., VS Code, Chrome DevTools) to connect to Bun’s debugging server over WebSocket at the specified URL.\nHow It Works Together:\nBun Starts the Debugging Server:\nWhen you run the command, Bun launches index.js, pauses execution (due to --inspect-brk), and starts a WebSocket server at 192.168.1.90:9229. It generates a unique session ID (like /hiva4rzuydf) for the connection.\nDebugger Connects:\nYour debugger uses the WebSocket URL from the JSON (ws://192.168.1.90:9229/hiva4rzuydf) to attach to Bun.\nThe debugging protocol (based on V8’s Inspector Protocol, which Bun supports) allows the debugger to send commands (e.g., “step,” “continue,” “set breakpoint”) and receive runtime info (e.g., variables, call stack).\nYou Debug:\nOnce connected, you can step through your index.js code, inspect variables, and troubleshoot issues in real time.\nWhy It Works:\nNetwork Setup: The IP 192.168.1.90 suggests you’re running this locally or on a LAN. If you’re debugging from the same machine, this works seamlessly. If it’s a different machine, that machine needs access to 192.168.1.90:9229.\nBun’s Inspector: Bun implements a Node.js-compatible debugging protocol, so tools like Chrome DevTools or VS Code can connect without extra setup.\nPaused Execution: --inspect-brk ensures the script waits for your debugger to attach, avoiding the race condition of missing early execution.\nExample Workflow:\nYou run the Bun command in your terminal from packages/the-org.\nBun pauses and outputs something like:  \nWaiting for debugger to connect at ws://192.168.1.90:9229/hiva4rzuydf...\nIn VS Code (or similar), you use the JSON config to attach the debugger.\nThe debugger connects, and you see your code paused at the first line of index.js. From there, you can step through, set breakpoints, etc.\n"
      },
      {
        "id": "IC_kwDOMT5cIs6i-bHs",
        "author": "jmikedupont2",
        "body": "works with localhost \n\n```bun --verbose --inspect-brk=9229 ```\nthat gives\n`ws://localhost:9229/jbirqbye4eo`\n\n\nwhich we can use in the connect \n```\n{\n      \"url\": \"ws://localhost:9229/jbirqbye4eo\",\n      \"name\": \"Attach bun\",\n      \"type\": \"bun\",\n      \"request\": \"attach\"\n    },\n\n```"
      }
    ]
  }
]
